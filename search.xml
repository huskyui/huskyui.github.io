<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode-234回文链表</title>
      <link href="/2020/10/25/leetcode-234%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/10/25/leetcode-234%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="本题重要点"><a href="#本题重要点" class="headerlink" title="本题重要点"></a>本题重要点</h3><ul><li><p>反转链表<br><img src="http://qjrzrivoh.hd-bkt.clouddn.com/1605373087.9003437513.png" alt="在这里插入图片描述"></p></li><li><p>快慢指针，一个二倍速，一个一倍速，可以获取一个链表的中间节点 </p></li></ul><pre><code>1-&gt;2-&gt;3-4-&gt;null=&gt;     3-&gt;4-&gt;null1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null=&gt;   3-&gt;4-&gt;5-&gt;null</code></pre><ul><li>后半段反转后，依次和总的链表进行比较，如果不同就false,这里就是一个长链表和一个短链表的对比了，大可不必担心，这个链表是奇数还是偶数 </li></ul><pre><code>//请判断一个链表是否为回文链表。 //// 示例 1: //// 输入: 1-&gt;2//输出: false //// 示例 2: //// 输入: 1-&gt;2-&gt;2-&gt;1//输出: true// //// 进阶： //你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？ // Related Topics 链表 双指针 // 👍 744 👎 0//leetcode submit region begin(Prohibit modification and deletion)/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */class Solution {    public ListNode reverseList(ListNode head) {        ListNode curr = null;        ListNode pre = head;        while (pre != null) {            ListNode tempNode = pre.next;            pre.next = curr;            curr = pre;            pre = tempNode;        }        return curr;    }    public ListNode getHalfNode(ListNode head) {        ListNode fast = head;        ListNode low = head;        while (fast != null &amp;&amp; fast.next != null) {            fast = fast.next.next;            low = low.next;        }        return low;    }    public boolean isPalindrome(ListNode head) {        ListNode temp = head;        ListNode half = getHalfNode(temp);        ListNode reverseList = reverseList(half);        ListNode p = head;        ListNode q = reverseList;        while (q != null) {            if (p.val != q.val) {                return false;            }            p = p.next;            q = q.next;        }        return true;    }}//leetcode submit region end(Prohibit modification and deletion)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信获取小程序码</title>
      <link href="/2019/11/26/%E5%BE%AE%E4%BF%A1%E8%8E%B7%E5%8F%96%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81/"/>
      <url>/2019/11/26/%E5%BE%AE%E4%BF%A1%E8%8E%B7%E5%8F%96%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序获取小程序码的无限制接口是返回二进制内容"><a href="#微信小程序获取小程序码的无限制接口是返回二进制内容" class="headerlink" title="微信小程序获取小程序码的无限制接口是返回二进制内容"></a>微信小程序获取小程序码的无限制接口是返回二进制内容</h2><p><img src="http://qjrzrivoh.hd-bkt.clouddn.com/1605373707.43866013214.png" alt="MxzZ8g.png"><br><img src="http://qjrzrivoh.hd-bkt.clouddn.com/1605373707.67657957234.png" alt="MxzVPS.png"></p><h3 id="请求微信接口获取字节数组byte"><a href="#请求微信接口获取字节数组byte" class="headerlink" title="请求微信接口获取字节数组byte[]"></a>请求微信接口获取字节数组byte[]</h3><pre><code> public byte[] getQrCodeUnlimited(String scene,String page){        // 获取access_token 请自己封装        String accessToken = getAccessToken();        Map&lt;String,String&gt; params = new HashMap&lt;&gt;(3);        params.put(&quot;scene&quot;,scene);        params.put(&quot;page&quot;,page);        try {            byte[] buffer = HttpClientUtil.doJsonPostRawResponse(&quot;https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=&quot; + accessToken, null, params);            return buffer;        }catch (Exception e){            e.printStackTrace();            return null;        }    }// 此处的httpUtil是我自己封装的，你也可以使用[wxJava](https://github.com/Wechat-Group/WxJava)里面的小程序获取byte数组的方法获取，第二种没有尝试过</code></pre><h3 id="通过springmvc输出出去"><a href="#通过springmvc输出出去" class="headerlink" title="通过springmvc输出出去"></a>通过springmvc输出出去</h3><pre><code>@RequestMapping(&quot;/qrcode&quot;)@RestControllerpublic class QrCodeController {    @Autowired    private WechatUtil wechatUtil;    // 这个方法可以实现，十分简单    @RequestMapping(&quot;/unlimted&quot;)    public void getQrcodeUnlimted(@RequestParam(value = &quot;page&quot;,required = false)String page,@RequestParam(value = &quot;sid&quot;,required = false)String sid, HttpServletResponse response) throws IOException {        sid = URLDecoder.decode(sid,&quot;UTF-8&quot;);        String scene = sid;        byte[] buffer =  wechatUtil.getQrCodeUnlimited(scene,page);        response.setContentType(&quot;image/jpeg&quot;);        OutputStream outputStream = response.getOutputStream();        outputStream.write(buffer);        outputStream.flush();        outputStream.close();    }    // 下面这个方法，也可以实现    @RequestMapping(&quot;/unlimted2&quot;)    public ResponseEntity&lt;byte[]&gt; getQrcodeUnlimted2(@RequestParam(value = &quot;page&quot;,required = false)String page, @RequestParam(value = &quot;sid&quot;,required = false)String sid, HttpServletResponse response) throws IOException {        sid = URLDecoder.decode(sid,&quot;UTF-8&quot;);        String scene = sid;        byte[] buffer =  wechatUtil.getQrCodeUnlimited(scene,page);        HttpHeaders headers = new HttpHeaders();        headers.setCacheControl(CacheControl.noCache().getHeaderValue());        headers.setContentType(MediaType.IMAGE_JPEG);        ResponseEntity&lt;byte[]&gt; responseEntity = new ResponseEntity&lt;byte[]&gt;(buffer,headers,HttpStatus.OK);        return responseEntity;    }}</code></pre><h3 id="前端可以通过修改src里面的值来修改"><a href="#前端可以通过修改src里面的值来修改" class="headerlink" title="前端可以通过修改src里面的值来修改"></a>前端可以通过修改src里面的值来修改</h3><pre><code>&lt;img src=&quot;data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUA    AAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO        9TXL0Y4OHwAAAABJRU5ErkJggg==&quot; alt=&quot;Red dot&quot; /&gt;</code></pre><p>具体可以参考 <a href="https://segmentfault.com/q/1010000011529278" target="_blank" rel="noopener"> base64图片 </a> 中的高分答案</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这终究是以IO操作，返回流时，加了头部信息image/jpeg</p><p>不多bb，我去当社畜了，如果有需要工具包的可以评论。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springboot </tag>
            
            <tag> Java学习 </tag>
            
            <tag> 小程序码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
