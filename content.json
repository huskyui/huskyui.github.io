{"meta":{"title":"huskyui","subtitle":"","description":"","author":"huskyui","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"leetcode-234回文链表","slug":"leetcode-234回文链表","date":"2020-10-25T15:33:26.000Z","updated":"2020-11-14T16:58:08.119Z","comments":true,"path":"2020/10/25/leetcode-234回文链表/","link":"","permalink":"http://yoursite.com/2020/10/25/leetcode-234%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/","excerpt":"","text":"本题重要点 反转链表 快慢指针，一个二倍速，一个一倍速，可以获取一个链表的中间节点 1-&gt;2-&gt;3-4-&gt;null =&gt; 3-&gt;4-&gt;null 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null =&gt; 3-&gt;4-&gt;5-&gt;null 后半段反转后，依次和总的链表进行比较，如果不同就false,这里就是一个长链表和一个短链表的对比了，大可不必担心，这个链表是奇数还是偶数 //请判断一个链表是否为回文链表。 // // 示例 1: // // 输入: 1-&gt;2 //输出: false // // 示例 2: // // 输入: 1-&gt;2-&gt;2-&gt;1 //输出: true // // // 进阶： //你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？ // Related Topics 链表 双指针 // 👍 744 👎 0 //leetcode submit region begin(Prohibit modification and deletion) /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList(ListNode head) { ListNode curr = null; ListNode pre = head; while (pre != null) { ListNode tempNode = pre.next; pre.next = curr; curr = pre; pre = tempNode; } return curr; } public ListNode getHalfNode(ListNode head) { ListNode fast = head; ListNode low = head; while (fast != null &amp;&amp; fast.next != null) { fast = fast.next.next; low = low.next; } return low; } public boolean isPalindrome(ListNode head) { ListNode temp = head; ListNode half = getHalfNode(temp); ListNode reverseList = reverseList(half); ListNode p = head; ListNode q = reverseList; while (q != null) { if (p.val != q.val) { return false; } p = p.next; q = q.next; } return true; } } //leetcode submit region end(Prohibit modification and deletion)","categories":[],"tags":[]},{"title":"微信获取小程序码","slug":"微信获取小程序码","date":"2019-11-26T03:44:48.000Z","updated":"2020-11-14T17:08:27.877Z","comments":true,"path":"2019/11/26/微信获取小程序码/","link":"","permalink":"http://yoursite.com/2019/11/26/%E5%BE%AE%E4%BF%A1%E8%8E%B7%E5%8F%96%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81/","excerpt":"","text":"微信小程序获取小程序码的无限制接口是返回二进制内容 请求微信接口获取字节数组byte[] public byte[] getQrCodeUnlimited(String scene,String page){ // 获取access_token 请自己封装 String accessToken = getAccessToken(); Map&lt;String,String&gt; params = new HashMap&lt;&gt;(3); params.put(&quot;scene&quot;,scene); params.put(&quot;page&quot;,page); try { byte[] buffer = HttpClientUtil.doJsonPostRawResponse(&quot;https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=&quot; + accessToken, null, params); return buffer; }catch (Exception e){ e.printStackTrace(); return null; } } // 此处的httpUtil是我自己封装的，你也可以使用[wxJava](https://github.com/Wechat-Group/WxJava)里面的小程序获取byte数组的方法获取，第二种没有尝试过通过springmvc输出出去@RequestMapping(&quot;/qrcode&quot;) @RestController public class QrCodeController { @Autowired private WechatUtil wechatUtil; // 这个方法可以实现，十分简单 @RequestMapping(&quot;/unlimted&quot;) public void getQrcodeUnlimted(@RequestParam(value = &quot;page&quot;,required = false)String page,@RequestParam(value = &quot;sid&quot;,required = false)String sid, HttpServletResponse response) throws IOException { sid = URLDecoder.decode(sid,&quot;UTF-8&quot;); String scene = sid; byte[] buffer = wechatUtil.getQrCodeUnlimited(scene,page); response.setContentType(&quot;image/jpeg&quot;); OutputStream outputStream = response.getOutputStream(); outputStream.write(buffer); outputStream.flush(); outputStream.close(); } // 下面这个方法，也可以实现 @RequestMapping(&quot;/unlimted2&quot;) public ResponseEntity&lt;byte[]&gt; getQrcodeUnlimted2(@RequestParam(value = &quot;page&quot;,required = false)String page, @RequestParam(value = &quot;sid&quot;,required = false)String sid, HttpServletResponse response) throws IOException { sid = URLDecoder.decode(sid,&quot;UTF-8&quot;); String scene = sid; byte[] buffer = wechatUtil.getQrCodeUnlimited(scene,page); HttpHeaders headers = new HttpHeaders(); headers.setCacheControl(CacheControl.noCache().getHeaderValue()); headers.setContentType(MediaType.IMAGE_JPEG); ResponseEntity&lt;byte[]&gt; responseEntity = new ResponseEntity&lt;byte[]&gt;(buffer,headers,HttpStatus.OK); return responseEntity; } }前端可以通过修改src里面的值来修改&lt;img src=&quot;data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUA AAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO 9TXL0Y4OHwAAAABJRU5ErkJggg==&quot; alt=&quot;Red dot&quot; /&gt;具体可以参考 base64图片 中的高分答案 总结这终究是以IO操作，返回流时，加了头部信息image/jpeg 不多bb，我去当社畜了，如果有需要工具包的可以评论。","categories":[],"tags":[{"name":"spring","slug":"spring","permalink":"http://yoursite.com/tags/spring/"},{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"},{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/tags/Java%E5%AD%A6%E4%B9%A0/"},{"name":"小程序码","slug":"小程序码","permalink":"http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81/"}]}]}