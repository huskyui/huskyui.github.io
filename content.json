{"meta":{"title":"huskyui","subtitle":"","description":"","author":"huskyui","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"0109 什么是微服务","slug":"0109-什么是微服务","date":"2020-01-10T03:52:53.000Z","updated":"2020-01-10T06:32:53.291Z","comments":true,"path":"2020/01/10/0109-什么是微服务/","link":"","permalink":"http://yoursite.com/2020/01/10/0109-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1/","excerpt":"微服务架构风格，就像是把一个单独的应用程序开发为一套小服务，每个小服务运行在自己的进程中，并使用轻量级机制通信，通常是HTTP API.这些服务围绕业务能力来构建，并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据存储技术，并保持最低限度的集中式管理。","text":"微服务架构风格，就像是把一个单独的应用程序开发为一套小服务，每个小服务运行在自己的进程中，并使用轻量级机制通信，通常是HTTP API.这些服务围绕业务能力来构建，并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据存储技术，并保持最低限度的集中式管理。 微服务为什么要使用Spring Cloud从使用nginx说起最初的服务化解决方案是给提供相同服务提供一个统一的域名，然后服务调用者向这个域名发送HTTP请求，由Nginx负责请求的分发和跳转 但是这样有不少缺点: Nginx作为中间层，在配置文件中耦合了服务调用的逻辑，这削弱了微服务的完整性，也使得Nginx在一定程度上变成了一个重量级的ESB. 服务的信息分散在各个系统，无法统一管理和维护。每一次的服务调用都是一次尝试，服务消费者并不知道有哪些实例在给他们提供服务。这不符合DevOps的理念。 无法直观的看到服务提供者和服务消费者当前的运行和通信频率。这也不符合DevOps的理念。 消费者的失败重发，负载均衡等都没有统一策略，这加大了开发每个服务的难度，不利于快熟演化。 为了解决上面的问题，我们需要一个现成的中心化组件对服务进行整合，将每个服务的信息整合，包括服务的组件名称、地址、数量等。服务的调用方在请求每项服务时首先通过中心组件获取提供这项服务的实例的信息（IP、端口等），再通过默认或自定义的策略选择该服务的某一提供者直接进行访问，所以我们引入了Dubbo。 基于Dubbo实现微服务Dubbo是阿里开源的一个SOA服务治理解决方案，文档丰富，在国内的使用度非常高。 使用Dubbo构建的微服务，已经比较好地解决上面提到的问题： 调用中间层变成了可选组件，消费者可以直接访问服务提供者 服务信息被集中到Registry中，形成了服务治理的中心组件。 通过Monitor监控系统，可以直观地展示服务调用的统计信息。 Consumer可以进行负载均衡、服务降级的选择 但是对于微服务架构而言，Dubbo也并不是十全十美的： Registry严重依赖第三方组件（Zookeeper或者redis），当这些组件出现问题，服务调用很快就会中断（当然，我之前也试过中断时，会有缓存还是可以调用） Dubbo只支持RPC调用。使得服务提供方与调用方在代码上产生了强依赖，服务提供者需要不断将包含公共代码的jar包打包出来供消费者使用。一旦打包出现问题，就会导致服务调用出现问题（公共代码是指 包含公共配置：DO(和数据库同步，用于持久化对象)，VO(传输数据)，工具包，接口等） 新的选择–Spring clouddubbo和spring cloud 区别 Dubbo Spring Cloud 服务注册中心 Zookeeper Spring Cloud Netflix Eureka 服务调用方式 RPC REST API 服务监控 Dubbo-monitor Spring Boot Admin 断路器 不完善 Spring Cloud Netflix Hystrix 服务网关 无 Spring Cloud Netflix Zuul 分布式配置 无 Spring Cloud Config 服务跟踪 无 Spring Cloud Sleuth 消息总线 无 Spring Cloud Bus 数据流 无 Spring Cloud Stream 批量任务 无 Spring Cloud Task 服务调用方式：Spring Cloud 抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式。严格来说，这两种各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用的依赖只依赖一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更加合适。","categories":[{"name":"Spring cloud","slug":"Spring-cloud","permalink":"http://yoursite.com/categories/Spring-cloud/"}],"tags":[{"name":"Spring cloud","slug":"Spring-cloud","permalink":"http://yoursite.com/tags/Spring-cloud/"}]},{"title":"hexo大致教程","slug":"hexo","date":"2020-01-10T03:16:18.000Z","updated":"2020-01-10T03:48:58.483Z","comments":true,"path":"2020/01/10/hexo/","link":"","permalink":"http://yoursite.com/2020/01/10/hexo/","excerpt":"","text":"步骤 安装npm,并配置淘宝镜像 下载hexo 1$ npm install -g hexo-cli 修改theme 12教程 https:&#x2F;&#x2F;xaoxuu.com&#x2F;wiki&#x2F;material-x&#x2F;index.html完成后： 修改_config.yml中的theme配置 部署到用户名.github.io 12345大致教程： https:&#x2F;&#x2F;www.bilibili.com&#x2F;read&#x2F;cv2204874&#x2F;新建md： hexo new &#39;文件名&#39;会在&#x2F;source&#x2F;_posts&#x2F;文件名.mdhexo d -g","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-01-10T02:35:18.889Z","updated":"2020-01-10T02:35:18.889Z","comments":true,"path":"2020/01/10/hello-world/","link":"","permalink":"http://yoursite.com/2020/01/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}